{"version":3,"sources":["CounterBoard/CounterBoard.module.css","Settings/Settings.module.css","Input/Input.module.css","Button/Button.tsx","CounterBoard/CounterBoard.tsx","Counter.tsx","Input/Input.tsx","Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","onChange","onClick","callBack","disabled","title","CounterBoard","edit","value","enter","error","classNameCount","finish","styles","BoardCountMax","BoardCount","classNameErrorEnter","BoardError","BoardStart","Board","Counter","counter","startValue","finishValue","setCounter","setEdit","setError","setEnter","disabledForInc","disabledForReset","Input","callback","errorClass","type","Settings","minInput","maxInput","callBackHandlerForSet","disForSet","settingsWrapper","e","maxValue","currentTarget","max","JSON","parse","minValue","min","App","useState","setStartValue","setFinishValue","setDisabled","useEffect","minString","localStorage","getItem","minNumber","maxString","maxNumber","setItem","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbc0f556.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoardStart\":\"CounterBoard_BoardStart__Tc16g\",\"BoardCount\":\"CounterBoard_BoardCount__1xQfT\",\"BoardError\":\"CounterBoard_BoardError__1V5ui\",\"BoardCountMax\":\"CounterBoard_BoardCountMax__2YfzO\",\"Board\":\"CounterBoard_Board__2ubvD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"Settings_settingsWrapper__2Ma3t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__2DBya\"};","import React from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack:()=> void\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button (props:PropsType) {\r\n\r\n\r\n\r\n    const onClickHandler = () => {\r\n        props.callBack()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <button className=\"btn\" onChange={()=>{}} onClick={onClickHandler} disabled={props.disabled}>{props.title}</button>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './CounterBoard.module.css'\r\n\r\ntype PropsType = {\r\n    edit:boolean\r\n    value:number\r\n    error:string | null\r\n    enter:string | null\r\n    finish:number\r\n}\r\n\r\n\r\nexport function CounterBoard ({edit, value, enter, error,  finish}:PropsType) {\r\n\r\n    const classNameCount = value === finish ? styles.BoardCountMax : styles.BoardCount\r\n\r\n    const classNameErrorEnter = error ? styles.BoardError : styles.BoardStart\r\n\r\n    return (\r\n        edit\r\n      ? <div className={styles.Board}>\r\n            <p className={classNameErrorEnter}>{error || enter}</p>\r\n        </div>\r\n\r\n       : <div className={styles.Board}>\r\n            <p className={classNameCount}>{value}</p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './App.css';\r\nimport classes from \"./Counter.module.css\"\r\nimport {Button} from \"./Button/Button\";\r\nimport {CounterBoard} from \"./CounterBoard/CounterBoard\";\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    disabled:boolean\r\n    edit:boolean\r\n    startValue: number\r\n    finishValue: number\r\n    counter:number\r\n    setCounter:(counter:number)=> void\r\n    error:string | null\r\n    setError:(error:string | null)=> void\r\n    setEdit:(edit:boolean)=> void\r\n    enter: string | null\r\n    setEnter: (enter:string | null)=> void\r\n}\r\n\r\n\r\nexport function Counter({value, counter,\r\n                            startValue,\r\n                            finishValue,\r\n                            setCounter,\r\n                            setEdit,\r\n                            setError,\r\n                            error, edit,setEnter,enter, disabled}: PropsType) {\r\n\r\n\r\n    const disabledForInc =  finishValue <= startValue || startValue < 0 || value === finishValue\r\n    const disabledForReset = finishValue <= startValue || startValue < 0\r\n    const errorMessage = startValue < 0 || finishValue < 0 || startValue > finishValue\r\n    const startMessage = startValue === 0 && finishValue === 0\r\n\r\n\r\n\r\n\r\n    const incHandler = () => {\r\n        if (counter >= finishValue) {\r\n            return\r\n        }\r\n        let result = counter + 1\r\n        setCounter(result)\r\n    }\r\n    const resetHandler = () => {\r\n        setCounter(startValue)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n          <CounterBoard\r\n              edit={edit}\r\n              value={value}\r\n             error={error}\r\n              enter={enter}\r\n              finish={finishValue}\r\n          />\r\n\r\n            <div className=\"btn__container\">\r\n                <Button title={\"INC\"} disabled={!disabled || disabledForInc} callBack={incHandler}/>\r\n                <Button title={\"RESET\"}  disabled={!disabled || disabledForReset} callBack={resetHandler}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"./Input.module.css\"\r\n\r\ntype InputType = {\r\n    callback:(e: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    startValue:number\r\n    finishValue:number\r\n}\r\n\r\n\r\nexport function Input ({startValue,finishValue,value,callback}:InputType) {\r\n\r\n    const errorClass = finishValue < 0 ||\r\n    startValue < 0 ||\r\n    startValue === finishValue ||\r\n    startValue > finishValue ? styles.error : \"\"\r\n    \r\n\r\n    return (\r\n        <input className={errorClass} value={value} type=\"number\" onChange={callback}/>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../Button/Button\";\r\nimport styles from \"./Settings.module.css\"\r\n\r\n\r\n\r\ntype SettingsType = {\r\n    startValue: number\r\n    finishValue: number\r\n    maxInput:(max:number)=> void\r\n    minInput:(min:number)=>void\r\n    callBackHandlerForSet:()=> void\r\n    disabled: boolean\r\n    error:string | null\r\n    setError:(error:string | null)=> void\r\n    setEdit:(edit:boolean)=> void\r\n\r\n}\r\n\r\n\r\nexport function Settings({startValue,\r\n                             finishValue,\r\n                             minInput,\r\n                             maxInput,\r\n                             callBackHandlerForSet,\r\n                             disabled,\r\n                            error\r\n                            }:SettingsType) {\r\n\r\n    const onChangeMinInput = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let minValue = e.currentTarget.value\r\n        let min = JSON.parse(minValue)\r\n        minInput(min)\r\n    }\r\n\r\n    const onChangeMaxInput = (e:ChangeEvent<HTMLInputElement>) => {\r\n      let maxValue = e.currentTarget.value\r\n        let max = JSON.parse(maxValue)\r\n        maxInput(max)\r\n    }\r\n\r\n    const disForSet = disabled || finishValue <= startValue || startValue < 0\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.settingsWrapper}>\r\n                <p>max value:</p>\r\n                <Input\r\n                   value={finishValue}\r\n                   startValue={startValue}\r\n                   finishValue={finishValue}\r\n                    callback={onChangeMaxInput}/>\r\n            </div>\r\n            <div className={styles.settingsWrapper}>\r\n                <p>start value:</p>\r\n                <Input\r\n                    startValue={startValue}\r\n                    finishValue={finishValue}\r\n                   value={startValue}\r\n                    callback={onChangeMinInput} />\r\n            </div>\r\n            <Button title=\"set\"  disabled={disForSet} callBack={callBackHandlerForSet}/>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {Settings} from \"./Settings/Settings\";\n\n\nfunction App() {\n    let [startValue, setStartValue] = useState<number>(0)\n    let [finishValue, setFinishValue] = useState<number>(0)\n    let [counter, setCounter] = useState<number>(startValue)\n    let [error, setError] = useState<string | null>(null)\n    let [enter, setEnter] = useState<string | null>(null)\n    let [disabled, setDisabled] = useState<boolean>(false)\n    let [edit, setEdit] = useState<boolean>(false)\n\n\n\n    useEffect(() => {\n        if (startValue === 0 && finishValue === 0) {\n            setEdit(true)\n            setEnter('enter value and press \"set\"')\n        }\n\n    },[])\n\n    useEffect(() => {\n\n        if (startValue < 0 || startValue > finishValue || finishValue < 0 || (startValue>0 && finishValue>0 && startValue === finishValue)) {\n            setError('Incorrect value')\n            setEdit(true)\n        } else if (startValue > 0 || startValue < finishValue || finishValue > 0) {\n            setError(null)\n            setEdit(true)\n            setEnter('enter value and press \"set\"')\n        }\n    },[startValue, finishValue])\n\n    useEffect(() => {\n        let minString = localStorage.getItem('minValue')\n        if (minString) {\n            let minNumber = JSON.parse(minString)\n            setStartValue(minNumber)\n            setCounter(minNumber)\n        }\n        setDisabled(true)\n\n        let maxString = localStorage.getItem('maxValue')\n        if (maxString) {\n            let maxNumber = JSON.parse(maxString)\n            setFinishValue(maxNumber)\n        }\n\n    }, [])\n\n\n    const callBackHandlerForSet = () => {\n        setCounter(startValue)\n        setDisabled(true)\n        setEdit(false)\n        localStorage.setItem(\"minValue\", startValue.toString())\n        localStorage.setItem(\"maxValue\", finishValue.toString())\n    }\n\n    const minInput = (min: number) => {\n        setStartValue(min)\n        setDisabled(false)\n\n    }\n\n    const maxInput = (max: number) => {\n        setFinishValue(max)\n        setDisabled(false)\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Settings\n                startValue={startValue}\n                finishValue={finishValue}\n                minInput={minInput}\n                maxInput={maxInput}\n                callBackHandlerForSet={callBackHandlerForSet}\n                disabled={disabled}\n                error={error}\n                setError={setError}\n                setEdit={setEdit}\n            />\n            <Counter\n                value={counter}\n                disabled={disabled}\n                edit={edit}\n                startValue={startValue}\n                finishValue={finishValue}\n                counter={counter}\n                setCounter={setCounter}\n                setError={setError}\n                setEdit={setEdit}\n                error={error}\n                enter={enter}\n                setEnter={setEnter}\n\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}